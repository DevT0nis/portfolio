/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/
import { useAnimations, useFBX, useGLTF } from "@react-three/drei";
import { useFrame } from "@react-three/fiber";
import { useControls } from "leva";
import React, { useEffect, useRef } from "react";
import * as THREE from "three";

interface AvatarProps {
  animation: string;
}

export function Avatar(props: AvatarProps) {
  const { animation } = props;
  const { headFollow, cursorFollow, wireframe } = useControls({
    headFollow: false,
    cursorFollow: false,
    wireframe: false,
  });
  const group = useRef<THREE.Group>(null);
  const { nodes, materials } = useGLTF("models/6653867ccf97e5aaac4da218.glb");

  const { animations: typingAnimation } = useFBX("animations/Typing.fbx");
  const { animations: jumpingAnimation } = useFBX("animations/Salsa Dancing.fbx");
  const { animations: talkingAnimation } = useFBX("animations/Talking1.fbx");

  typingAnimation[0].name = "Typing";
  jumpingAnimation[0].name = "Dançar";
  talkingAnimation[0].name = "Falar";

  const { actions = {} } = useAnimations(
    [typingAnimation[0], jumpingAnimation[0], talkingAnimation[0] ],
    group as React.MutableRefObject<THREE.Group>
  );

  useFrame((state) => {
    if (headFollow && group.current) {
      group.current.getObjectByName("Head")?.lookAt(state.camera.position);
    }
    if (cursorFollow && group.current) {
      const target = new THREE.Vector3(state.mouse.x, state.mouse.y, 1);
      group.current.getObjectByName("Spine2")?.lookAt(target);
    }
  });

  useEffect(() => {
    if (actions[animation]) {
      actions[animation]!.reset().fadeIn(0.5).play();
    }
    return () => {
      if (actions[animation]) {
        actions[animation]!.reset().fadeOut(0.5);
      }
    };
  }, [animation, actions]);

  useEffect(() => {
    if (materials) {
      Object.values(materials).forEach((material) => {
        if (material instanceof THREE.MeshStandardMaterial) {
          material.wireframe = wireframe;
        }
      });
    }
  }, [wireframe, materials]);



  useEffect(() => {
    if (group.current) {
      group.current.rotation.set(-1.5, 0, 0); // Rotação zerada para colocar em pé
      group.current.position.set(0, 0, 0); // Posição ajustada conforme necessário
    }
  }, []);

  return (
    <group {...props} ref={group}>
      <group>
        <primitive object={nodes?.Hips} />
        <skinnedMesh
          geometry={nodes?.Wolf3D_Body?.geometry}
          material={materials?.Wolf3D_Body}
          skeleton={nodes?.Wolf3D_Body?.skeleton}
        />
        <skinnedMesh
          geometry={nodes?.Wolf3D_Outfit_Bottom?.geometry}
          material={materials?.Wolf3D_Outfit_Bottom}
          skeleton={nodes?.Wolf3D_Outfit_Bottom?.skeleton}
        />
        <skinnedMesh
          geometry={nodes?.Wolf3D_Outfit_Footwear?.geometry}
          material={materials?.Wolf3D_Outfit_Footwear}
          skeleton={nodes?.Wolf3D_Outfit_Footwear?.skeleton}
        />
        <skinnedMesh
          geometry={nodes?.Wolf3D_Outfit_Top?.geometry}
          material={materials?.Wolf3D_Outfit_Top}
          skeleton={nodes?.Wolf3D_Outfit_Top?.skeleton}
        />
        <skinnedMesh
          geometry={nodes?.Wolf3D_Hair?.geometry}
          material={materials?.Wolf3D_Hair}
          skeleton={nodes?.Wolf3D_Hair?.skeleton}
        />
        <skinnedMesh
          name="EyeLeft"
          geometry={nodes?.EyeLeft?.geometry}
          material={materials?.Wolf3D_Eye}
          skeleton={nodes?.EyeLeft?.skeleton}
          morphTargetDictionary={nodes?.EyeLeft?.morphTargetDictionary}
          morphTargetInfluences={nodes?.EyeLeft?.morphTargetInfluences}
        />
        <skinnedMesh
          name="EyeRight"
          geometry={nodes?.EyeRight?.geometry}
          material={materials?.Wolf3D_Eye}
          skeleton={nodes?.EyeRight?.skeleton}
          morphTargetDictionary={nodes?.EyeRight?.morphTargetDictionary}
          morphTargetInfluences={nodes?.EyeRight?.morphTargetInfluences}
        />
        <skinnedMesh
          name="Wolf3D_Head"
          geometry={nodes?.Wolf3D_Head?.geometry}
          material={materials?.Wolf3D_Skin}
          skeleton={nodes?.Wolf3D_Head?.skeleton}
          morphTargetDictionary={nodes?.Wolf3D_Head?.morphTargetDictionary}
          morphTargetInfluences={nodes?.Wolf3D_Head?.morphTargetInfluences}
        />
        <skinnedMesh
          name="Wolf3D_Teeth"
          geometry={nodes?.Wolf3D_Teeth?.geometry}
          material={materials?.Wolf3D_Teeth}
          skeleton={nodes?.Wolf3D_Teeth?.skeleton}
          morphTargetDictionary={nodes?.Wolf3D_Teeth?.morphTargetDictionary}
          morphTargetInfluences={nodes?.Wolf3D_Teeth?.morphTargetInfluences}
        />
      </group>
    </group>
  );
}

useGLTF.preload("models/6653867ccf97e5aaac4da218.glb");
